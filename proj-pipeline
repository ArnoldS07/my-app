node {
    stage('SCM Checkout') {
        git 'https://github.com/ArnoldS07/my-app.git'
    }

    stage('maven-buildstage') {
        def mvnHome = tool name: 'maven3', type: 'maven'
        sh "${mvnHome}/bin/mvn clean package"
        sh 'mv target/myweb*.war target/newapp.war'
    }

    stage('SonarQube Analysis') {
        def mvnHome = tool name: 'maven3', type: 'maven'
        withSonarQubeEnv('sonar') { 
            sh "${mvnHome}/bin/mvn sonar:sonar"
        }
    }

    stage('Build Docker Image') {
        sh 'docker build -t arnolds08/app:0.0.2 .'
    }

    stage('Trivy Scan') {
        // Ensure Trivy is installed in the Jenkins agent
        // This will fail the build if HIGH or CRITICAL vulnerabilities are found
        sh '''
            trivy image --exit-code 0 --severity HIGH,CRITICAL arnolds08/app:0.0.2
        '''
    }

    stage('Docker Image Push') {
        withCredentials([string(credentialsId: 'dockerPass', variable: 'dockerPassword')]) {
            sh '''
                echo "$dockerPassword" | docker login -u arnolds08 --password-stdin
            '''
        }
        sh 'docker push arnolds08/app:0.0.2'
    }

    stage('Remove Previous Container') {
        try {
            sh 'docker rm -f tomcattest'
        } catch (error) {
            // Do nothing if there is an exception
        }
    }

    stage('Docker deployment') {
        sh 'docker run -d -p 8090:8080 --name tomcattest arnolds08/app:0.0.2' 
    }
}
